{"version":3,"sources":["units/validators/validators.ts","components/common/Paginator/paginator.module.scss","components/Users/users.module.scss","api/profile-api.ts","redux/profile_reducer.ts","api/api.ts","assets/images/default_avatar.png","redux/dialogs_reducer.ts","api/chat-api.ts","redux/chat_reducer.ts","components/common/Preloader/Preloader.module.scss","api/auth-api.ts","api/security-api.ts","redux/auth_reducer.ts","redux/app_reducer.ts","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Settings/Settings.tsx","components/Users/User.tsx","components/common/Paginator/Paginator.tsx","redux/selectors/users_selectors.ts","components/Users/UsersSearchForm.tsx","units/validators/object_helpers.ts","api/users-api.ts","redux/users_reducer.ts","components/Users/Users.tsx","redux/selectors/auth_selectors.ts","components/Header/Header.tsx","components/Login/Login.tsx","App.tsx","serviceWorker.js","redux/sidebar_reducer.ts","redux/redux-store.ts","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.scss"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getStatus","dispatch","a","updateStatus","resultCode","ResultCodeEnum","Success","savePhoto","file","saveProfile","getState","auth","getUserProfile","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","ResultCodeCaptchaEnum","axios","create","withCredentials","baseURL","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","ws","subscribers","closeHandler","notifySubscribersAboutStatus","setTimeout","createChanel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","log","cleanUp","WebSocket","addEventListener","removeEventListener","close","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","authReducer","initialized","appReducer","SubMenu","Menu","Navbar","mode","style","height","key","icon","UserOutlined","title","Item","to","LaptopOutlined","NotificationOutlined","Music","News","Settings","User","user","followingInProgress","unFollow","follow","className","styles","userItems","src","small","userPhoto","alt","usersPhoto","followed","disabled","some","onClick","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","x","portionSize","useState","portionNumber","setPortionNumber","pagesCount","Math","ceil","pages","i","portionCount","leftPortionPageNumber","rightPortionPageNumber","paginator","cn","selectedPage","pageNumber","getUsers","createSelector","usersPage","users","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","UserSearchForm","onFilterChanged","useSelector","enableReinitialize","initialValues","term","friend","String","validate","values","onSubmit","setSubmitting","isSubmitting","as","updateObjectInArray","items","itemId","objPropName","newObjProps","u","usersApi","response","count","requestUsers","totalCount","followUnFollowFlow","apiMethod","actionCreator","usersReducer","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","pathname","following","bind","unFollowing","Preloader","selectIsAuth","Header","Layout","Headers","span","theme","defaultSelectedKeys","backgroundColor","Login","LoginReduxForm","loginData","CaptchaIsRequired","url","reduxForm","form","handleSubmit","error","createField","Input","undefined","formSummaryError","Content","Footer","Sider","DialogsContainer","React","lazy","ProfileContainer","ChatPage","compose","withRouter","connect","app","initializeApp","promise","all","props","padding","margin","width","minHeight","Suspense","fallback","path","exact","component","render","textAlign","Boolean","window","hostname","match","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","formReducer","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","FormControl","meta","touched","children","hasError","formControl","TextArea","input","restProps","placeholder","validators","text","lds_ellipsis"],"mappings":"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","file":"static/js/main.8982fd33.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n}\r\nexport const maxLengthCreator = (maxLength:number): FieldValidatorType => value => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"paginator_selectedPage__MveUZ\",\"paginator\":\"paginator_paginator__3mR-g\",\"pageNumber\":\"paginator_pageNumber__ngnHq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"users_usersPhoto__3qpGH\",\"userItems\":\"users_userItems__1aHz_\"};","import {instance, APIResponseType} from \"./api\";\r\n\r\nimport {PhotosType, ProfileType} from \"../types/types\";\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-type\": \"multipart/form-data\"\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    },\r\n};\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}","import {FormAction, stopSubmit} from \"redux-form\";\r\n\r\nimport {ResultCodeEnum} from \"../api/api\";\r\n\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 3},\r\n        {id: 2, message: \"It's my first post\", likesCount: 1},\r\n        {id: 3, message: \"Hello\", likesCount: 9},\r\n        {id: 4, message: \"Da-da\", likesCount: 91},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        case \"SET_USER_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case \"SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        case \"SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: \"ADD-POST\", newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: \"SET_USER_PROFILE\", profile} as const),\r\n    setStatus: (status: string) => ({type: \"SET_STATUS\", status} as const),\r\n    deletePost: (postId: number) => ({type: \"DELETE_POST\", postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SAVE_PHOTO_SUCCESS\", photos} as const)\r\n\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(actions.setStatus(status));\r\n        }\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n};\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.id;\r\n    let data = await profileAPI.saveProfile(profile);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        if(userId !== null) {\r\n        dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"Id пользователя не может быть null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit_profile\", {_error: data.messages[0]}));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\n\r\nexport default profileReducer\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import axios from \"axios\";\r\nimport {UsersType} from \"../types/types\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"350f9694-8da6-4ed4-9d92-64e0db1a0191\"\r\n    },\r\n})\r\n\r\nexport enum ResultCodeEnum {// enum может быть либо A либо B либо...\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\nexport enum ResultCodeCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UsersType>\r\n    totalCount: number,\r\n    error: null | string\r\n}\r\n\r\nexport type APIResponseType<D = {},RC = ResultCodeEnum> = {\r\n    data: D\r\n    resultCode: RC\r\n    messages: Array<string>\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/default_avatar.7e3dbe23.png\";","import {InferActionsTypes } from \"./redux-store\";\r\n\r\ntype DialogType = {\r\n    id: number, name: string\r\n}\r\n\r\ntype MessageType = {\r\n    id: number, message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Аноним\"},\r\n        {id: 2, name: \"Аноним\"},\r\n        {id: 3, name: \"Аноним\"},\r\n        {id: 5, name: \"Аноним\"},\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"How are you\"},\r\n        {id: 3, message: \"Hey yo\"},\r\n    ] as Array<MessageType>,\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SEND-MESSAGE\":\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({\r\n        type: \"SEND-MESSAGE\" ,newMessageBody} as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","let ws: WebSocket | null\r\nconst subscribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChanel, 3000)\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data);\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\n\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.log(\"Error! Refresh page.\")\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers[\"status-changed\"].forEach( s => s(status))\r\n}\r\n\r\nconst createChanel = () => {\r\n    cleanUp()\r\n    ws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\")\r\n    notifySubscribersAboutStatus('pending')\r\n    ws?.addEventListener('close', closeHandler)\r\n    ws?.addEventListener('message', messageHandler)\r\n    ws?.addEventListener('open', openHandler)\r\n    ws?.addEventListener('error', errorHandler)\r\n}\r\n\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener(\"close\", closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n    ws?.close()\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChanel()\r\n    },\r\n    stop() {\r\n        subscribers['messages-received'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unSubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    },\r\n\r\n}\r\n\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageApiType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nexport type StatusType = \"pending\" | \"ready\" | 'error'\r\n\r\nexport type ChatMessageApiType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string,\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {v1} from \"uuid\";\r\n\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {chatAPI, ChatMessageApiType, StatusType} from \"../api/chat-api\";\r\n\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: \"pending\" as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"MESSAGE_RECEIVED\":\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v1()}))]\r\n                    .filter((message, index,array) => index >= array.length - 100)\r\n            }\r\n        case \"STATUS_CHANGED\":\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageApiType[]) => ({\r\n        type: \"MESSAGE_RECEIVED\", payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: \"STATUS_CHANGED\", payload: {status}\r\n    } as const)\r\n}\r\n\r\nlet _newMessageHandler: ((message: ChatMessageApiType[]) => void) | null = null\r\n\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\n\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unSubscribe('messages-received',newMessageHandlerCreator(dispatch))\r\n    chatAPI.unSubscribe('status-changed',statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\nexport const sendMessage = (message: string): ThunkType => async () => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\nexport default chatReducer\r\n\r\ntype ChatMessageType = ChatMessageApiType & {id: string}\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds_ellipsis\":\"Preloader_lds_ellipsis__2BwT0\",\"lds-ellipsis1\":\"Preloader_lds-ellipsis1__IN4-T\",\"lds-ellipsis2\":\"Preloader_lds-ellipsis2__2LLl-\",\"lds-ellipsis3\":\"Preloader_lds-ellipsis3__3FJmT\"};","import {instance, APIResponseType, ResultCodeCaptchaEnum, ResultCodeEnum} from \"./api\";\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodeEnum | ResultCodeCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data)\r\n    },\r\n    logOut() {\r\n        return instance.delete<APIResponseType>(`auth/login`).then(res => res.data)\r\n    },\r\n};\r\n\r\n\r\ntype MeResponseDataType = {\r\n        id: number\r\n        email: string\r\n        login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n        id: number\r\n}\r\n","import {instance} from \"./api\";\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string \r\n}\r\n","import {FormAction, stopSubmit} from \"redux-form\";\r\n\r\nimport {ResultCodeCaptchaEnum, ResultCodeEnum} from \"../api/api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\n\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null,\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n        case \"GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: \"SET_USER_DATA\", payload: {id, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: \"GET_CAPTCHA_URL_SUCCESS\", payload: {captchaUrl}\r\n    } as const),\r\n\r\n}\r\n\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n    if (meData.resultCode === ResultCodeEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\nexport const logOut = (): ThunkType => async (dispatch) => {\r\n    let logOutData = await authAPI.logOut()\r\n    if (logOutData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType =>\r\n    async (dispatch) => {\r\n        const loginData = await authAPI.login(email, password, rememberMe, captcha);\r\n        if (loginData.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(getAuthUserData());\r\n        } else {\r\n            if (loginData.resultCode === ResultCodeCaptchaEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message = loginData.messages.length > 0 ? loginData.messages[0] : \"Some error\"\r\n            dispatch(stopSubmit(\"login\", {_error: message}));\r\n        }\r\n    };\r\n\r\nexport default authReducer\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import {getAuthUserData} from \"./auth_reducer\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action:ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state, initialized: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: ()=> ({type: \"SN/APP/INITIALIZED_SUCCESS\"} as const)\r\n\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess())\r\n        })\r\n};\r\n\r\nexport default appReducer\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from \"@ant-design/icons\";\r\nimport {Menu} from \"antd\";\r\n\r\n\r\nconst {SubMenu} = Menu;\r\n\r\nexport const Navbar: React.FC = () => {\r\n    return (\r\n        <Menu\r\n            mode=\"inline\"\r\n            /*defaultSelectedKeys={['1']}\r\n            defaultOpenKeys={['sub1']}*/\r\n            style={{height: '100%'}}\r\n        >\r\n            <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My profile\">\r\n                <Menu.Item key=\"1\">\r\n                    <Link to=\"/profile\">Profile</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\">\r\n                    <Link to=\"/dialogs\">Messages</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\">\r\n                    <Link to=\"/music\">Music</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\">\r\n                    <Link to=\"/settings\">Settings</Link>\r\n                </Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Users\">\r\n                <Menu.Item key=\"5\">\r\n                    <Link to=\"/users\">Users</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"6\">\r\n                    <Link to=\"/chat\">Chat</Link>\r\n                </Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"News\">\r\n                <Menu.Item key=\"7\">\r\n                    <Link to=\"/news\">News</Link>\r\n                </Menu.Item>\r\n            </SubMenu>\r\n        </Menu>\r\n    )\r\n};","import React from \"react\";\r\n\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Music;","import React from \"react\";\r\n\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default News;","import React from \"react\";\r\n\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport userPhoto from \"../../assets/images/default_avatar.png\";\r\n\r\nimport styles from \"./users.module.scss\";\r\nimport {UsersType} from \"../../types/types\";\r\n\r\n\r\nexport const User: React.FC<PropsType> = ({user, followingInProgress, unFollow, follow}) => {\r\n    return (\r\n        <div className={styles.userItems}>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={\"/profile/\" + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             alt=\"Avatar img\"\r\n                             className={styles.usersPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      unFollow(user.id);\r\n                                  }}>Un follow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      follow(user.id);\r\n                                  }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    user: UsersType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nimport styles from \"./paginator.module.scss\";\r\n\r\nimport cn from \"classnames\";\r\n\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    portionSize?: number\r\n    onPageChanged?: (p: number) => void\r\n}\r\n\r\nexport const Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage = 1, onPageChanged = x => x, portionSize = 10}) => {\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    const pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    const portionCount = Math.ceil(pagesCount / portionSize);\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber = portionNumber * portionSize;\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return (<span className={cn({\r\n                        [styles.selectedPage]: currentPage === p\r\n                    }, styles.pageNumber)}\r\n                                  key={p}\r\n                                  onClick={() => {\r\n                                      onPageChanged(p)\r\n                                  }}>{p}</span>)\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {createSelector} from \"reselect\";\r\n\r\nimport {AppStateType} from \"../redux-store\";\r\n\r\n\r\nexport const getUsersSelector = (state:AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector(getUsersSelector, (users)=> {\r\n    return users.filter( () => true)\r\n});\r\n\r\nexport const getPageSize = (state:AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state:AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state:AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsFetching = (state:AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state:AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport const getUsersFilter = (state:AppStateType) => {\r\n    return state.usersPage.filter;\r\n};\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Field, Form, Formik} from \"formik\";\r\n\r\nimport {FilterType} from \"../../redux/users_reducer\";\r\nimport {getUsersFilter} from \"../../redux/selectors/users_selectors\";\r\n\r\n\r\nexport const UserSearchForm: React.FC<PropsType> = ({onFilterChanged}) => {\r\n    const filter = useSelector(getUsersFilter);\r\n    const onSubmit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n        onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    const usersSearchFormValidate = (values: any) => {\r\n        // const errors = {}\r\n        // return errors\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={onSubmit}>\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Followed</option>\r\n                            <option value=\"false\">Un followed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) =>\r\n            u[objPropName] === itemId\r\n                ? {...u, ...newObjProps}\r\n                : u\r\n        // if (u[objPropName] === itemId) {\r\n        //     return {...u, ...newObjProps}\r\n        // }\r\n        // return u;\r\n    )\r\n}","import {GetItemsType, instance, APIResponseType} from \"./api\";\r\n\r\n\r\nexport const usersApi = {getUsers(currentPage = 1, pageSize = 10, term = \"\", friend: null | false | true = null) {\r\n        return instance.get<GetItemsType>\r\n        (`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`))\r\n            .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<APIResponseType>(`follow/${id}`, {},)\r\n            .then(response => response.data)\r\n    },\r\n    unFollow(id: number) {\r\n        return instance.delete<APIResponseType>(`follow/${id}`)\r\n            .then(response => response.data)\r\n    },\r\n}\r\n","import {Dispatch} from \"redux\";\r\n\r\nimport {updateObjectInArray} from \"../units/validators/object_helpers\";\r\nimport {InferActionsTypes, BaseThunkType} from \"./redux-store\";\r\n\r\nimport {UsersType} from \"../types/types\";\r\nimport {usersApi} from \"../api/users-api\";\r\nimport {APIResponseType} from \"../api/api\";\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, // мaсив зафоловенных номеров id\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true}),\r\n            }\r\n        case \"UN_FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false}),\r\n            }\r\n        case \"SET_USERS\":\r\n            return {...state, users: action.users}\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n            return {...state, totalUsersCount: action.count}\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        case \"SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({\r\n        type: \"FOLLOW\", userId\r\n    } as const),\r\n    unFollowSuccess: (userId: number) => ({\r\n        type: \"UN_FOLLOW\", userId\r\n    } as const),\r\n    setUsers: (users: Array<UsersType>) => ({\r\n        type: \"SET_USERS\", users\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: \"SET_CURRENT_PAGE\",\r\n        currentPage: currentPage\r\n    } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: \"SET_TOTAL_USERS_COUNT\",\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: \"TOGGLE_IS_FETCHING\",\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: \"TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n        isFetching,\r\n        userId\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({\r\n        type: \"SET_FILTER\",\r\n        payload: filter\r\n    } as const)\r\n\r\n}\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(currentPage));\r\n        dispatch(actions.setFilter(filter));\r\n        let data = await usersApi.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n\r\n    };\r\n\r\nconst followUnFollowFlow = async (dispatch: Dispatch<ActionsType>,\r\n                                  userId: number,\r\n                                  apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                  actionCreator: (userId: number) => ActionsType) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\nexport const follow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        await followUnFollowFlow(dispatch, userId, usersApi.follow.bind(usersApi), actions.followSuccess)\r\n    };\r\nexport const unFollow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        await followUnFollowFlow(dispatch, userId, usersApi.unFollow.bind(usersApi), actions.unFollowSuccess)\r\n    };\r\n\r\nexport default usersReducer\r\n\r\ntype InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\nimport {User} from \"./User\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {UserSearchForm} from \"./UsersSearchForm\";\r\n\r\nimport {FilterType, follow, requestUsers, unFollow} from \"../../redux/users_reducer\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/selectors/users_selectors\";\r\n\r\n\r\nexport const Users: React.FC<PropsType> = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const users = useSelector(getUsers);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const pageSize = useSelector(getPageSize);\r\n    const filter = useSelector(getUsersFilter);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const isFetching = useSelector(getIsFetching);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n        if(!!parsed.page) actualPage = Number(parsed.page)\r\n        if(!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if(!!filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n            history.push({\r\n            pathname: \"/users\",\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    }\r\n\r\n    const following = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const unFollowing = (userId: number) => {\r\n        dispatch(unFollow(userId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>{\"Пользователи\"}</h2>\r\n            <UserSearchForm onFilterChanged={onFilterChanged}/>\r\n            <Paginator currentPage={currentPage} pageSize={pageSize}\r\n                       totalItemsCount={totalUsersCount} onPageChanged={onPageChanged}/>\r\n            {isFetching ? <Preloader/> :\r\n                <div>\r\n                    {users.map(u =>\r\n                        <User user={u} followingInProgress={followingInProgress}\r\n                              follow={following} unFollow={unFollowing} key={u.id}/>)\r\n                    }\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {}\r\ntype QueryParamsType = {term?: string, friend?: string, page?: string}","import {AppStateType} from \"../redux-store\";\r\n\r\n\r\nexport const selectIsAuth = (state:AppStateType) => {\r\n    return state.auth.isAuth;\r\n};\r\nexport const selectCurrentUserLogin = (state:AppStateType) => {\r\n    return state.auth.login;\r\n};\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\n\r\n\r\nimport {selectCurrentUserLogin, selectIsAuth} from \"../../redux/selectors/auth_selectors\";\r\nimport {logOut} from \"../../redux/auth_reducer\";\r\n\r\n\r\nconst {Header} = Layout;\r\n\r\nexport const Headers: React.FC<PropsType> = () => {\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector(selectIsAuth)\r\n\r\n    const OnLogOut = () => {\r\n        dispatch(logOut())\r\n    }\r\n\r\n    return (\r\n        <Header className=\"header\">\r\n            <div className=\"logo\"/>\r\n            <Row>\r\n                <Col span={19}>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                        <Menu.Item key=\"1\">\r\n                            <Link to=\"/profile\">Profile</Link>\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Col>\r\n                {isAuth\r\n                    ? <>\r\n                        <Col span={1}>\r\n                            <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                        </Col>\r\n                        <Col span={4}>\r\n                            <Button onClick={OnLogOut}>Log out</Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col span={5}>\r\n                        <Button>\r\n                            <Link to={`/login`}>Login</Link>\r\n                        </Button>\r\n                    </Col>}\r\n            </Row>\r\n        </Header>\r\n    )\r\n}\r\n\r\ntype PropsType = {}","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {required} from \"../../units/validators/validators\";\r\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {login} from \"../../redux/auth_reducer\";\r\n\r\nimport style from \"../common/FormsControls/FormsControls.module.scss\"\r\n\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, PropsType> & PropsType> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormKeysType>(\"Email\",\"email\", [required], Input)}\r\n            {createField<LoginFormKeysType>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField<LoginFormKeysType>(undefined, \"rememberMe\", [], Input,\r\n                {type: \"checkbox\"}, \"Remember me\")}\r\n            {captchaUrl && <img alt=\"\" src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormKeysType>(\"Captcha\", \"captcha\", [required], Input, {},)}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport const Login: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n\r\n    const onSubmit = ({email, password, rememberMe, captcha}: LoginFormValuesType) => {\r\n        dispatch(login(email, password, rememberMe, captcha))\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, PropsType>({form: \"login\"})(LoginForm);\r\n\r\ntype PropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormKeysType = GetStringKeys<LoginFormValuesType>\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {Breadcrumb, Layout} from 'antd';\r\n\r\nimport {initializeApp} from \"./redux/app_reducer\";\r\nimport {Navbar} from './components/Navbar/Navbar';\r\nimport Music from \"./components/Music/Music\";\r\nimport News from \"./components/News/News\";\r\nimport {Settings} from \"./components/Settings/Settings\";\r\nimport {Users} from \"./components/Users/Users\";\r\nimport {Headers} from \"./components/Header/Header\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\r\n\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\n\r\nimport {AppStateType} from \"./redux/redux-store\";\r\n\r\n\r\nconst {Content, Footer, Sider } = Layout;\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\r\nconst ChatPage = React.lazy(() => import(\"./pages/Chat/ChatPage\"));\r\n\r\nconst App: React.FC<PropsType> = (props) => {\r\n    React.useEffect(() => {\r\n        props.initializeApp()\r\n    }, [])\r\n\r\n    if (!props.initialized) return <Preloader/>\r\n\r\n    return( <Layout>\r\n            <Headers/>\r\n            <Content style={{ padding: '0 50px' }}>\r\n                <Breadcrumb style={{ margin: '16px 0' }}>\r\n                    <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                </Breadcrumb>\r\n                <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\r\n                    <Sider className=\"site-layout-background\" width={200}>\r\n                        <Navbar/>\r\n                    </Sider>\r\n                    <Content style={{ padding: '0 24px', minHeight: 280 }}>\r\n                        <React.Suspense fallback={<Preloader/>}>\r\n                            <Switch>\r\n                                <Route path='/' exact><Redirect to='/profile'/></Route>\r\n                                <Route exact path=\"/dialogs/:userId?\" component={DialogsContainer}/>\r\n                                <Route exact path=\"/profile/:userId?\" component={ProfileContainer}/>\r\n                                <Route exact path=\"/chat\" component={ChatPage}/>\r\n                                <Route exact path=\"/users\" component={Users}/>\r\n                                <Route exact path=\"/login\" component={Login}/>\r\n                                <Route exact path=\"/news\" component={News}/>\r\n                                <Route exact path=\"/music\" component={Music}/>\r\n                                <Route exact path=\"/settings\" component={Settings}/>\r\n                                <Route path=\"*\" render={() => <div>404 NOT FOUND</div>}/>\r\n                            </Switch>\r\n                        </React.Suspense>\r\n                    </Content>\r\n                </Layout>\r\n            </Content>\r\n            <Footer style={{ textAlign: 'center' }}>Social network 2020 on React</Footer>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\ntype PropsType = ReturnType<typeof mapStateToProps> & { initializeApp: () => void }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","let initialState = {}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action:any):InitialState => {\r\n\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\n\r\nimport profileReducer from \"./profile_reducer\";\r\nimport dialogsReducer from \"./dialogs_reducer\";\r\nimport sidebarReducer from \"./sidebar_reducer\";\r\nimport usersReducer from \"./users_reducer\";\r\nimport authReducer from \"./auth_reducer\";\r\nimport appReducer from \"./app_reducer\";\r\nimport chatReducer from \"./chat_reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    chat: chatReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends {[key:string]: (...args:any[])=> infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport {Provider} from \"react-redux\";\r\nimport ReactDOM from 'react-dom';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/redux-store\"\r\n\r\nimport './index.css';\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\nimport styles from \"./FormsControls.module.scss\";\r\n\r\nimport {FieldValidatorType} from \"../../../units/validators/validators\";\r\n\r\n\r\ntype FormsControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea{...input} {...restProps}/></FormControl>\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input{...input} {...restProps}/></FormControl>\r\n};\r\n\r\nexport function createField<FormsKeysType extends string>(placeholder: string | undefined,\r\n                                      name: FormsKeysType,\r\n                                      validators: Array<FieldValidatorType>,\r\n                                      component: React.FC<WrappedFieldProps>,\r\n                                      props = {}, text = \" \") {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder} name={name}\r\n                   validate={validators} component={component}\r\n                   {...props}/> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","import React from \"react\";\r\n\r\nimport style from \"./Preloader.module.scss\";\r\n\r\n\r\nexport const Preloader: React.FC = () => {\r\n    return (\r\n        <div className={style.lds_ellipsis}>\r\n            <div>\r\n\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Q0Bw\",\"error\":\"FormsControls_error__-R594\",\"formSummaryError\":\"FormsControls_formSummaryError__1Inyn\"};"],"sourceRoot":""}