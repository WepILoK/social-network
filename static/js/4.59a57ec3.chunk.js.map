{"version":3,"sources":["components/Dialogs/Dialogs.module.scss","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Messege/Messege.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/DialogsContainer.ts","components/Dialogs/Dialogs.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","id","name","path","className","s","dialog","active","src","alt","Message","message","dialogs_message_item","maxLength50","maxLengthCreator","reduxForm","form","handleSubmit","onSubmit","createField","required","TextArea","compose","dialogsPage","actions","sendMessage","dialogs","dialogs_item","map","d","index","key","dialogs_messages","messages","m","values","newMessageBody"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,eAAiB,kC,gHCM/GC,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAuBC,GAOnC,OAAOC,YAAoEN,EAA4B,GAAhGM,EANuE,SAACC,GAAW,IAC/EL,EAAwBK,EAAxBL,OAAWM,EADmE,YACtDD,EADsD,YAErF,OAAKL,EAEM,kBAACG,EAAcG,GAFN,kBAAC,IAAD,CAAUC,GAAI,gB,sHCR7BC,EAAkC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KAC3CC,EAAO,YAAcF,EAC3B,OACI,yBAAKG,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,yBACIC,IAAI,oMACJC,IAAI,eACR,kBAAC,IAAD,CAASV,GAAII,GAAOD,KCRnBQ,EAA+B,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC1C,OACI,yBAAKP,UAAWC,IAAEO,sBAAuBD,I,0BCC3CE,EAAcC,YAAiB,IAetBC,cAA8B,CACzCC,KAAM,wBADKD,EAbgF,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aAC7F,OACI,0BAAMC,SAAUD,GACZ,6BACKE,YAAoC,mIAA2B,iBAAkB,CAACC,IAAUP,GAAcQ,MAE/G,6BACI,oD,SCADC,sBAA6B1B,aANtB,SAACL,GACnB,MAAO,CACHgC,YAAahC,EAAMgC,eAIwB,eAC1BC,MACrB9B,IAFW4B,ECN6B,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAYE,EAAiB,EAAjBA,YAClDlC,EAAQgC,EAIZ,OACI,yBAAKnB,UAAWC,IAAEqB,SACd,yBAAKtB,UAAWC,IAAEsB,cACbpC,EAAMmC,QAAQE,KAAI,SAACC,EAAGC,GAAJ,OACf,kBAAC,EAAD,CAAY5B,KAAM2B,EAAE3B,KAAM6B,IAAG,UAAKF,EAAE5B,GAAP,YAAa6B,GAAS7B,GAAI4B,EAAE5B,SAGjE,yBAAKG,UAAWC,IAAE2B,kBACd,6BAAMzC,EAAM0C,SAASL,KAAI,SAACM,EAAEJ,GAAH,OACrB,kBAAC,EAAD,CAASnB,QAASuB,EAAEvB,QAASoB,IAAG,UAAKG,EAAEjC,GAAP,YAAa6B,UAGrD,kBAAC,EAAD,CAAgBZ,SAfF,SAACiB,GACnBV,EAAYU,EAAOC","file":"static/js/4.59a57ec3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__27ntd\",\"dialogs_item\":\"Dialogs_dialogs_item__1flH2\",\"dialogs_active\":\"Dialogs_dialogs_active__21-q1\"};","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n} as MapStatePropsType);\r\n\r\nexport function withAuthRedirect<WCP> (Component: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n            return <Component {...restProps as WCP}/>\r\n    }\r\n    return connect<MapStatePropsType, MapDispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent);\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport s from \"../Dialogs.module.scss\";\r\n\r\n\r\nexport const DialogItem: React.FC<PropsType> = ({id, name}) => {\r\n    const path = \"/dialogs/\" + id;\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <img\r\n                src=\"https://store.playstation.com/store/api/chihiro/00_09_000/container/RU/ru/999/EP2402-CUSA05624_00-AV00000000000110/1576760036000/image?w=240&h=240&bg_color=000000&opacity=100&_version=00_09_000\"\r\n                alt=\"avatar img\"/>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nimport s from \"../Dialogs.module.scss\";\r\n\r\n\r\nexport const Message: React.FC<PropsType> = ({message}) => {\r\n    return (\r\n        <div className={s.dialogs_message_item}>{message}</div>\r\n    );\r\n};\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\n","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\nimport {createField, TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../units/validators/validators\";\r\nimport {NewMessageFormType} from \"../Dialogs\";\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormKeysType>(\"Введите текст сообщения\", \"newMessageBody\", [required, maxLength50], TextArea)}\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormType>({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\ntype NewMessageFormKeysType = Extract<keyof NewMessageFormType, string>\r\ntype PropsType = {}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n\r\nimport {actions} from \"../../redux/dialogs_reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(\r\n    mapStateToProps, {...actions}),\r\n    withAuthRedirect)(Dialogs);","import React from \"react\";\r\n\r\nimport s from './Dialogs.module.scss';\r\n\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Messege/Messege\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\nimport { InitialStateType } from \"../../redux/dialogs_reducer\";\r\n\r\n\r\nexport const Dialogs: React.FC<PropsType> = ({dialogsPage,sendMessage}) => {\r\n    let state = dialogsPage;\r\n    const addNewMessage = (values: NewMessageFormType) => {\r\n        sendMessage(values.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_item}>\r\n                {state.dialogs.map((d ,index)=>\r\n                    <DialogItem name={d.name} key={`${d.id}_${index}`} id={d.id}\r\n                    />)}\r\n            </div>\r\n            <div className={s.dialogs_messages}>\r\n                <div>{state.messages.map((m,index) =>\r\n                    <Message message={m.message} key={`${m.id}_${index}`}\r\n                    />)}</div>\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n"],"sourceRoot":""}