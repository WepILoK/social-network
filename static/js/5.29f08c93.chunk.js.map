{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Messages","messages","useSelector","state","chat","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","block","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","console","log","map","m","i","Message","key","id","message","ref","React","memo","to","userId","src","photo","width","alt","userName","AddMessageForm","setMessage","dispatch","useDispatch","status","sendMessageHandler","sendMessage","onKeyDown","keyCode","shiftKey","onChange","value","disabled","onClick","ChatPage","startMessagesListening","stopMessagesListening"],"mappings":"qLA8CMA,EAAqB,WACvB,IAAMC,EAAWC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,YAC3DI,EAAoBC,iBAAuB,MAFpB,EAGWC,oBAAS,GAHpB,mBAGtBC,EAHsB,KAGRC,EAHQ,KAK7BC,qBAAU,WACY,IAAD,EAAdF,IACC,UAAAH,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,MAAO,MAAOC,SAAU,cAExE,CAACb,IAYJ,OACI,yBAAKc,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAXhC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACfC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EC,QAAQC,IAAIN,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,gBACzElB,GAAgBC,GAAgB,IAEjCD,GAAgBC,GAAgB,KAM/BR,EAAS4B,KAAI,SAACC,EAAGC,GAAJ,OAAU,kBAACC,EAAD,CAASC,IAAKH,EAAEI,GAAIC,QAASL,OACrD,yBAAKM,IAAK/B,MAKhB2B,EAAqDK,IAAMC,MAAK,YAAgB,IAAdH,EAAa,EAAbA,QACpE,OACI,6BACI,kBAAC,IAAD,CAASI,GAAI,YAAcJ,EAAQK,QAI/B,yBAAKC,IAAKN,EAAQO,MAAO3B,MAAO,CAAC4B,MAAO,QAASC,IAAI,eACrD,2BAAI,KAAOT,EAAQU,WAEvB,6BACCV,EAAQA,QACT,iCAKNW,EAA2B,WAAO,IAAD,EACLvC,mBAAS,IADJ,mBAC5B4B,EAD4B,KACnBY,EADmB,KAE7BC,EAAWC,cACXC,EAAShD,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAK8C,UAEzDC,EAAqB,WAClBhB,IAGLa,EAASI,YAAYjB,IACrBY,EAAW,MASf,OACI,6BACI,6BACI,8BACIM,UAVI,SAAClC,GACA,IAAbA,EAAEmC,SAA+B,GAAdnC,EAAEoC,UACrBJ,KASQK,SAAU,SAACrC,GACP4B,EAAW5B,EAAEE,cAAcoC,QAE/BA,MAAOtB,KAGf,6BACI,4BAAQuB,SAAqB,UAAXR,EAAoBS,QAASR,GAA/C,6DAQDS,UA1HY,WACvB,IAAMZ,EAAWC,cASjB,OAPAvC,qBAAU,WAEN,OADAsC,EAASa,eACF,WACHb,EAASc,kBAEd,IAGC,6BACI,kBAAC9D,EAAD,MACA,kBAAC8C,EAAD","file":"static/js/5.29f08c93.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {ChatMessageApiType} from \"../../api/chat-api\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat_reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\n// const Chat: React.FC = () => {\r\n//     const dispatch = useDispatch()\r\n//\r\n//     useEffect(()=> {\r\n//         dispatch(startMessagesListening())\r\n//\r\n//         return () => {\r\n//             dispatch(stopMessagesListening())\r\n//         }\r\n//     }, [])\r\n//\r\n//     return (\r\n//         <div>\r\n//             <Messages/>\r\n//             <AddMessageForm/>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nconst Messages: React.FC = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    useEffect(() => {\r\n        if(isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({block: \"end\", behavior: 'smooth' })\r\n        }\r\n    }, [messages])\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            console.log(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight))\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        }else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{height: \"480px\", overflowY: \"auto\"}} onScroll={scrollHandler}>\r\n            {messages.map((m, i) => <Message key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageApiType }> = React.memo(({message}) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={\"/profile/\" + message.userId}>\r\n                {/*    <img src={user.photos.small != null ? user.photos.small : userPhoto}*/}\r\n                {/*         alt=\"Avatar img\"*/}\r\n                {/*    />*/}\r\n                <img src={message.photo} style={{width: \"30px\"}} alt=\"Avatar img\"/>\r\n                <b>{\"  \" + message.userName}</b>\r\n            </NavLink>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n    const [message, setMessage] = useState(\"\")\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage(\"\")\r\n    }\r\n\r\n    const enterSubmit = (e: any) => {\r\n        if (e.keyCode == 13 && e.shiftKey == false) {\r\n            sendMessageHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea\r\n                    onKeyDown={enterSubmit}\r\n                    onChange={(e) => {\r\n                        setMessage(e.currentTarget.value)\r\n                    }}\r\n                    value={message}>\r\n                </textarea>\r\n            </div>\r\n            <div>\r\n                <button disabled={status !== \"ready\"} onClick={sendMessageHandler}>\r\n                    Отправить\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage"],"sourceRoot":""}