{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/MyPosts/Post/Post.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Profile/Profile.module.scss","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatus","profStatus","isOwner","updateStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","reduxForm","form","handleSubmit","profile","error","onSubmit","className","s","formSummaryError","createField","Input","type","TextArea","Object","keys","contacts","map","key","style","contact","ProfileInfo","savePhoto","saveProfile","content_profile","src","photos","large","userPhoto","alt","target","files","length","initialValues","formData","then","goToEditMode","Preloader","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","onClick","Contact","Post","message","likesCount","content_post_item","required","MyPosts","React","memo","addPost","posts","content_post","values","newPostText","content_post_posts","p","id","profilePage","actions","addPostActionCreator","Profile","MyPostsContainer","compose","authorizedUserId","getUserProfile","getStatus","withRouter","userId","match","params","history","push","refreshProfile"],"mappings":"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","file":"static/js/3.76eb723f.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n} as MapStatePropsType);\r\n\r\nexport function withAuthRedirect<WCP> (Component: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n            return <Component {...restProps as WCP}/>\r\n    }\r\n    return connect<MapStatePropsType, MapDispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent);\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content_profile\":\"ProfileInfo_content_profile__3FNOl\",\"contact\":\"ProfileInfo_contact__ut_N6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content_post_item\":\"Post_content_post_item__2_brV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content_post\":\"MyPosts_content_post__1iWb9\",\"content_post_posts\":\"MyPosts_content_post_posts__2sBhg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1Bvi7\",\"headerPhoto\":\"Profile_headerPhoto__AEVjt\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\nexport const ProfileStatus: React.FC<PropsType> = ({profStatus, isOwner, updateStatus}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(profStatus);\r\n\r\n    useEffect(() => {\r\n        setStatus(profStatus)\r\n    }, [profStatus])\r\n\r\n    const activateEditMode = () => {\r\n        if (isOwner) {\r\n            setEditMode(true);\r\n        }\r\n    };\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateStatus(status);\r\n    };\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b> Status: </b><span onDoubleClick={activateEditMode}>{profStatus || \"=====\"}</span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true}\r\n                       onChange={onStatusChange}\r\n                       onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n};\r\n\r\ntype PropsType = {\r\n    profStatus: string\r\n    isOwner: boolean\r\n    updateStatus: (status: string) => void\r\n}\r\n","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\nimport {createField, GetStringKeys, Input, TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nimport s from \"../../common/FormsControls/FormsControls.module.scss\";\r\nimport style from \"./ProfileInfo.module.scss\";\r\n\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {error && <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n                <b>Full name: </b> {createField<ProfileDataFormKeysType>(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b>\r\n                {createField<ProfileDataFormKeysType>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills: </b>\r\n                {createField<ProfileDataFormKeysType>(\"My professional skills\", \"lookingForAJobDescription\",\r\n                    [], TextArea,)}\r\n            </div>\r\n            <div>\r\n                <b>About me: </b>\r\n                {createField<ProfileDataFormKeysType>(\"About me\", \"aboutMe\", [], TextArea,)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key =>\r\n                <div key={key} className={style.contact}>\r\n                    <b>{key}:</b>{createField(key, \"contacts.\" + key, [], Input)}\r\n                </div>\r\n            )}\r\n            </div>\r\n            <div>\r\n                <button>Save</button>\r\n\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm<ProfileType, PropsType>\r\n({form: \"edit_profile\"})(ProfileDataForm);\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nexport type ProfileDataFormType = {\r\n}\r\n\r\ntype ProfileDataFormKeysType = GetStringKeys<ProfileType>","import React, {ChangeEvent, useState} from \"react\";\r\n\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nimport userPhoto from \"../../../assets/images/default_avatar.png\";\r\n\r\nimport style from \"./ProfileInfo.module.scss\";\r\n\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\n\r\nexport const ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.content_profile}>\r\n                <img src={profile.photos.large || userPhoto} alt=\"Profile img\"/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>\r\n                }\r\n                <ProfileStatus profStatus={status} updateStatus={updateStatus} isOwner={isOwner}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <b>Full name: </b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b> {profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills: </b> {profile.lookingForAJobDescription}\r\n            </div>}\r\n            <div>\r\n                <b>About me: </b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key =>\r\n                <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            )}\r\n            </div>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>Edit</button>\r\n            </div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={style.contact}>\r\n            <b>{contactTitle + \":\"}</b> {contactValue}\r\n        </div>\r\n    )\r\n};\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}","import React from \"react\";\r\n\r\nimport s from \"./Post.module.scss\";\r\n\r\n\r\nexport const Post: React.FC<PropsType> = ({message, likesCount}) => {\r\n  return (\r\n    <div className={s.content_post_item}>\r\n      <img src=\"https://store.playstation.com/store/api/chihiro/00_09_000/container/RU/ru/999/EP2402-CUSA05624_00-AV00000000000110/1576760036000/image?w=240&h=240&bg_color=000000&opacity=100&_version=00_09_000\" alt=\"avatar img\"/>\r\n      {message}\r\n      <div>\r\n        <span>{likesCount} Like</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\nimport {createField, GetStringKeys, TextArea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../../units/validators/validators\";\r\n\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostValuesType, PropsType> & PropsType> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesKeysType>\r\n                (\"Введите текс поста\",\"newPostText\", [required], TextArea)}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostValuesType, PropsType>({\r\n    form:\"ProfileAddNewPostForm\"\r\n})(AddNewPostForm)\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nexport type AddPostValuesType = {\r\n newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesKeysType = GetStringKeys<AddPostValuesType>","import React from \"react\";\r\n\r\nimport {Post} from \"./Post/Post\";\r\nimport AddNewPostForm, {AddPostValuesType} from \"./AddPostForm/AddPostForm\";\r\n\r\nimport s from './MyPosts.module.scss';\r\n\r\nimport {PostType} from \"../../../types/types\";\r\n\r\n\r\nexport const MyPosts: React.FC<PropsType> = React.memo(({addPost, posts}) => {\r\n    const onAddPost = (values: AddPostValuesType) => {\r\n        addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.content_post}>\r\n            <h3>My post</h3>\r\n            <AddNewPostForm onSubmit={onAddPost}/>\r\n\r\n            <div className={s.content_post_posts}>\r\n                {posts.map((p) =>\r\n                    <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport type MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType","import {connect} from \"react-redux\";\r\n\r\nimport {actions} from \"../../../redux/profile_reducer\";\r\nimport {MapDispatchPropsType, MapStatePropsType, MyPosts} from \"./MyPosts\";\r\n\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreator})(MyPosts);","import React from \"react\";\r\n\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nimport style from './Profile.module.scss';\r\n\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\nexport const Profile: React.FC<PropsType> = ({isOwner, savePhoto, profile, status, updateStatus, saveProfile}) => {\r\n    return (\r\n        <div className={style.profile}>\r\n            <ProfileInfo isOwner={isOwner} profile={profile}\r\n                         status={status} updateStatus={updateStatus}\r\n                         savePhoto={savePhoto} saveProfile={saveProfile}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}","import React, {useEffect} from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\n\r\nimport {Profile} from \"./Profile\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus,} from \"../../redux/profile_reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\nconst ProfileContainer:React.FC<PropsType> = (props) => {\r\n    const refreshProfile = () => {\r\n        let userId: number | null = +props.match.params.userId;\r\n        if (!userId) {\r\n            userId = props.authorizedUserId;\r\n            if (!userId) {\r\n                props.history.push(\"/login\")\r\n            }\r\n        }\r\n        props.getUserProfile(userId as number);\r\n        props.getStatus(userId as number);\r\n    }\r\n\r\n    useEffect(()=> {\r\n        refreshProfile();\r\n    }, [props.match.params.userId])\r\n\r\n        return (\r\n            <Profile {...props}\r\n                     isOwner={!props.match.params.userId}\r\n                     profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}\r\n                     savePhoto={props.savePhoto}/>\r\n        );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n    {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\ntype MapStateType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapStateType & MapDispatchType & RouteComponentProps<PathParamsType>"],"sourceRoot":""}